import numpy as np
from numpy.random import default_rng
import sys 
sys.path.append("..") 
from OTFS import OTFS;


# QAM configuration
M_mod = 4;                                                                  # size of constellation
M_bits = np.log2(M_mod);
sympool = np.asarray([-0.707106781186548+0.707106781186548j, -0.707106781186548-0.707106781186548j,0.707106781186548+0.707106781186548j,0.707106781186548-0.707106781186548j]);
SNR = 10; # dB
#No = 1/10^(SNR/10); # linear
No = 0;

# OTFS configuration
N = 7;                          # time slot number
M = 12;                         # subcarrier number
N_syms_perfram = N*M;           # number of symbols per frame
N_bits_perfram = N*M*M_bits;    # number of bits per frame


# Gen information symbols (as a column vector)
data_temp = np.asarray([3,3,2,3,0,2,2,0,1,2,1,1,3,3,2,0,3,0,2,0,3,2,1,0,2,0,2,3,3,2,3,2,0,1,3,1,2,1,3,3,1,0,0,1,2,2,0,1,3,1,3,1,3,0,2,1,1,3,3,1,2,0,3,2,3,1,2,2,1,1,1,1,2,1,2,3,1,3,0,3,1,2,0,3]);
x_origin = sympool[data_temp];
x_origin_mat = np.asarray([0.707106781186548-0.707106781186548j,0.707106781186548-0.707106781186548j,0.707106781186548+0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j]);
residual_x_origin = sum(abs(x_origin_mat - x_origin));
print("x origin residual is %.16f"%residual_x_origin);

# init OTFS
otfs = OTFS(M, N);

# modulate
otfs.modulate(x_origin);
X_DD_mat = np.asarray([[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j]]);
X_DD = otfs.X_DD;
residual_X_DD = np.sum(abs(X_DD - X_DD_mat), axis=None);
print("X_DD residual is %.16f"%residual_x_origin);
