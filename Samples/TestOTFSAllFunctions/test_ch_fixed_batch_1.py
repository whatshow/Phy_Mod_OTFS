import numpy as np
from numpy.random import default_rng
import sys 
sys.path.append("..") 
from OTFS import OTFS;


# QAM configuration
M_mod = 4;                                                                  # size of constellation
M_bits = np.log2(M_mod);
sympool = np.asarray([-0.707106781186548+0.707106781186548j, -0.707106781186548-0.707106781186548j,0.707106781186548+0.707106781186548j,0.707106781186548-0.707106781186548j]);
SNR = 10; # dB
#No = 1/10^(SNR/10); # linear
No = 0;

# OTFS configuration
N = 4;                          # time slot number
M = 4;                         # subcarrier number
N_syms_perfram = N*M;           # number of symbols per frame
N_bits_perfram = N*M*M_bits;    # number of bits per frame

# batch size
batch_size=1;

# Gen information symbols (as a column vector)
data_temp = np.tile(np.asarray([3,3,2,3,0,2,2,0,1,2,1,1,3,3,2,0]), (batch_size, 1));
x_origin = sympool[data_temp];
x_origin_mat = np.asarray([0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j]);
x_origin_mat = np.tile(x_origin_mat, (batch_size, 1));
residual_x_origin = np.sum(abs(x_origin_mat - x_origin), axis=None);
print("x origin residual is %.16f"%residual_x_origin);

# init OTFS
otfs = OTFS(M, N, batch_size=batch_size);

# modulate
otfs.modulate(x_origin);
X_DD_mat = np.asarray([[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j],[-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j],[-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j]]);
X_DD_mat = np.tile(X_DD_mat, (batch_size, 1, 1));
X_DD = otfs.X_DD;
residual_X_DD = np.sum(abs(X_DD - X_DD_mat), axis=None);
print("X_DD residual is %.16f"%residual_X_DD);

X_TF_mat = np.asarray([[0.707106781186548 + 0.00000000000000j,0.353553390593274 - 0.353553390593274j,0.00000000000000 - 1.41421356237310j,1.76776695296637 + 0.353553390593274j], [-0.353553390593274 - 1.76776695296637j,-0.707106781186548 + 0.00000000000000j,1.06066017177982 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.353553390593274 + 0.353553390593274j,-0.707106781186548 + 0.00000000000000j,0.353553390593274 + 1.06066017177982j], [-0.353553390593274 + 0.353553390593274j,0.00000000000000 - 1.41421356237310j,-0.353553390593274 - 0.353553390593274j,0.707106781186548 + 0.00000000000000j]]);
X_TF_mat = np.tile(X_TF_mat, (batch_size, 1, 1));
X_TF = otfs.X_TF;
residual_X_TF = np.sum(abs(X_TF_mat - X_TF), axis=None);
print("X_TF residual is %.16f"%residual_X_TF);

s_mat = np.asarray([0.00000000000000 - 0.707106781186548j,1.41421356237310 + 0.00000000000000j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.00000000000000j,0.00000000000000 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.00000000000000j,5.55111512312578e-17 - 0.707106781186548j,0.00000000000000 + 0.00000000000000j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 1.41421356237310j,1.41421356237310 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 5.55111512312578e-17j]);
s_mat = np.tile(s_mat, (batch_size, 1));
s = otfs.s;
residual_s = np.sum(abs(s_mat - s), axis=None);
print("s residual is %.16f"%residual_s);

# set the channel
H_DD_mat = np.asarray([[0.00000000000000 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.24500451351651e-17 + 0.00000000000000j,3.20464671602113e-17 + 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.461939766255643 - 0.191341716182545j,0.500000000000000 - 9.18485099360515e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,3.46944695195361e-17 + 2.77555756156289e-17j,-1.81686793523968e-17 + 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 6.93889390390723e-18j], [4.11308068364097e-17 + 4.16333634234434e-17j,5.55111512312578e-17 - 6.93889390390723e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.500000000000000 - 1.37772764904077e-16j,-8.32667268468867e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-4.11308068364097e-17 + 5.55111512312578e-17j,0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 4.59242549680258e-17j,4.16333634234434e-17 + 8.32667268468867e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 + 8.32667268468867e-17j,-3.06161699786838e-17 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.191341716182545 + 0.461939766255643j,-4.16333634234434e-17 + 2.58227218470678e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-9.71445146547012e-17 - 1.38777878078145e-17j,1.22464679914735e-16 + 0.500000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-9.02056207507940e-17 + 2.77555756156289e-17j,-2.77555756156289e-17 - 2.58227218470678e-17j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 - 1.52655665885959e-16j,-2.77555756156289e-17 - 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.353553390593274 + 0.353553390593274j,-1.94289029309402e-16 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.52655665885959e-16 - 6.93889390390723e-17j,-0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,1.24900090270330e-16 + 1.24900090270330e-16j,0.00000000000000 - 1.94289029309402e-16j], [-3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-18 + 5.55111512312578e-17j,3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.191341716182545 + 0.461939766255643j,0.500000000000000 - 9.18485099360515e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,2.08166817117217e-17 - 2.77555756156289e-17j], [0.00000000000000 + 4.59242549680257e-17j,4.16333634234434e-17 + 8.32667268468867e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,4.59242549680258e-17 + 4.59242549680257e-17j,5.55111512312578e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.500000000000000 - 1.37772764904077e-16j,-6.93889390390723e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-4.59242549680258e-17 + 4.59242549680257e-17j,0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,-9.71445146547012e-17 + 0.00000000000000j,-3.06161699786838e-17 - 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-7.63278329429795e-17 + 8.32667268468867e-17j,-3.06161699786838e-17 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.191341716182545 + 0.461939766255643j,-3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.04083408558608e-16 + 0.00000000000000j,1.22464679914735e-16 + 0.500000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,1.11022302462516e-16 + 1.38777878078145e-16j,0.00000000000000 - 1.94289029309402e-16j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 - 1.52655665885959e-16j,0.00000000000000 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.353553390593274 + 0.353553390593274j,-1.94289029309402e-16 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.52655665885959e-16 - 6.93889390390723e-17j,-0.353553390593274 + 0.353553390593274j], [0.500000000000000 - 9.18485099360515e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-3.46944695195361e-17 - 2.77555756156289e-17j,-1.81686793523968e-17 + 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 - 6.93889390390723e-18j,0.00000000000000 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,6.24500451351651e-17 + 0.00000000000000j,3.20464671602113e-17 + 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.461939766255643 + 0.191341716182545j], [-4.11308068364097e-17 + 5.55111512312578e-17j,0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 4.59242549680258e-17j,4.16333634234434e-17 + 8.32667268468867e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,4.11308068364097e-17 + 4.16333634234434e-17j,5.55111512312578e-17 - 6.93889390390723e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.500000000000000 - 1.37772764904077e-16j,-8.32667268468867e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,-9.71445146547012e-17 - 1.38777878078145e-17j,1.22464679914735e-16 + 0.500000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-9.02056207507940e-17 + 2.77555756156289e-17j,-2.77555756156289e-17 - 2.58227218470678e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 + 8.32667268468867e-17j,-3.06161699786838e-17 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.191341716182545 + 0.461939766255643j,-4.16333634234434e-17 + 2.58227218470678e-17j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.52655665885959e-16 - 6.93889390390723e-17j,-0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,1.24900090270330e-16 + 1.24900090270330e-16j,0.00000000000000 - 1.94289029309402e-16j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 - 1.52655665885959e-16j,-2.77555756156289e-17 - 2.77555756156289e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.353553390593274 + 0.353553390593274j,-1.94289029309402e-16 + 0.00000000000000j], [3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.191341716182545 - 0.461939766255643j,0.500000000000000 - 9.18485099360515e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-2.08166817117217e-17 + 2.77555756156289e-17j,-3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,6.93889390390723e-18 - 5.55111512312578e-17j], [0.500000000000000 - 1.37772764904077e-16j,-6.93889390390723e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-4.59242549680258e-17 + 4.59242549680257e-17j,0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 4.59242549680257e-17j,4.16333634234434e-17 + 8.32667268468867e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,4.59242549680258e-17 + 4.59242549680257e-17j,5.55111512312578e-17 - 5.55111512312578e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.191341716182545 + 0.461939766255643j,-3.06161699786838e-17 + 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.04083408558608e-16 + 0.00000000000000j,1.22464679914735e-16 + 0.500000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-9.71445146547012e-17 + 0.00000000000000j,-3.06161699786838e-17 - 3.06161699786838e-17j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-7.63278329429795e-17 + 8.32667268468867e-17j,-3.06161699786838e-17 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j], [0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-0.353553390593274 + 0.353553390593274j,-1.94289029309402e-16 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-1.52655665885959e-16 - 6.93889390390723e-17j,-0.353553390593274 + 0.353553390593274j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,1.11022302462516e-16 + 1.38777878078145e-16j,0.00000000000000 - 1.94289029309402e-16j,0.00000000000000 + 0.00000000000000j,0.00000000000000 + 0.00000000000000j,-6.93889390390723e-17 - 1.52655665885959e-16j,0.00000000000000 - 5.55111512312578e-17j]]);
H_DD_mat = np.tile(H_DD_mat, (batch_size, 1, 1));
H_DD = otfs.setChannel(delays=np.tile([0, 1], (batch_size, 1)), dopplers=np.tile([2, 3], (batch_size, 1)), gains=np.tile([0.5, 0.5], (batch_size, 1)));
residual_H_DD = np.sum(abs(H_DD - H_DD_mat), axis=None);
print("H_DD residual is %.16f"%residual_H_DD);

# pass the channel
r_mat = np.asarray([0.135299025036549 - 0.680194131812368j,0.500000000000000 + 0.146446609406726j,-0.0829553405201752 + 1.00683487303146j,-0.250000000000000 - 0.250000000000000j,0.326640741219094 + 0.488852415629823j,-0.353553390593274 + 0.500000000000000j,-0.108386375662370 - 0.544895106775818j,0.250000000000000 + 0.250000000000000j,-0.135299025036549 - 0.0269126493741796j,1.02137832819695e-16 + 0.353553390593274j,0.353553390593274 - 0.353553390593274j,-0.249999999999999 + 0.750000000000000j,-0.109867989894356 - 0.871535847994914j,-0.853553390593273 + 0.707106781186548j,0.162211674410728 + 0.108386375662369j,0.250000000000000 - 0.750000000000000j]);
r_mat = np.tile(r_mat, (batch_size, 1));
r = otfs.passChannel(No);
residual_r = abs(r_mat - r);
print("r residual is %.16f"%np.sum(residual_r, axis=None));


# demodulate
yDD_mat = np.asarray([0.108386375662369 - 0.544895106775819j,-0.353553390593273 + 0.853553390593274j,0.162211674410729 + 0.108386375662370j,3.88578058618805e-16 - 5.55111512312578e-17j,0.815493156848918 - 0.544895106775819j,0.146446609406726 - 0.353553390593274j,-0.544895106775818 + 0.815493156848917j,0.500000000000000 - 0.500000000000000j,-0.108386375662369 - 0.162211674410728j,0.853553390593274 - 0.353553390593274j,0.108386375662370 + 0.544895106775819j,-0.499999999999999 + 0.500000000000000j,-0.544895106775819 - 0.108386375662369j,0.353553390593274 + 0.146446609406726j,0.108386375662369 + 0.544895106775819j,-0.500000000000001 - 0.500000000000000j]);
yDD_mat = np.tile(yDD_mat, (batch_size, 1));
yDD = otfs.demodulate();
residual_yDD = yDD_mat - yDD;
print("yDD residual is %.16f"%np.sum(abs(residual_yDD), axis=None));

# calculate the residual
yDD_est = np.squeeze(np.matmul(H_DD, np.expand_dims(x_origin, axis=-1)), axis=-1);
residual = np.sum(yDD - yDD_est, axis=None);
print("The residual is %.16f\n"%abs(residual));
