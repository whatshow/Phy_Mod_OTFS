import numpy as np
from numpy.random import default_rng
import sys 
sys.path.append("..") 
from OTFS import OTFS;


# QAM configuration
M_mod = 4;                                                                  # size of constellation
M_bits = np.log2(M_mod);
sympool = np.asarray([-0.707106781186548+0.707106781186548j, -0.707106781186548-0.707106781186548j,0.707106781186548+0.707106781186548j,0.707106781186548-0.707106781186548j]);
SNR = 10; # dB
#No = 1/10^(SNR/10); # linear
No = 0;

# OTFS configuration
N = 7;                          # time slot number
M = 12;                         # subcarrier number
N_syms_perfram = N*M;           # number of symbols per frame
N_bits_perfram = N*M*M_bits;    # number of bits per frame

# batch size
batch_size=512;

# Gen information symbols (as a column vector)
data_temp = np.asarray([3,3,2,3,0,2,2,0,1,2,1,1,3,3,2,0,3,0,2,0,3,2,1,0,2,0,2,3,3,2,3,2,0,1,3,1,2,1,3,3,1,0,0,1,2,2,0,1,3,1,3,1,3,0,2,1,1,3,3,1,2,0,3,2,3,1,2,2,1,1,1,1,2,1,2,3,1,3,0,3,1,2,0,3]);
data_temp = np.tile(data_temp, (batch_size, 1));
x_origin = sympool[data_temp];
x_origin_mat = np.asarray([0.707106781186548-0.707106781186548j,0.707106781186548-0.707106781186548j,0.707106781186548+0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j]);
x_origin_mat = np.tile(x_origin_mat, (batch_size, 1));
residual_x_origin = np.sum(abs(x_origin_mat - x_origin), axis=None);
print("x origin residual is %.16f"%residual_x_origin);

# init OTFS
otfs = OTFS(M, N, batch_size=batch_size);

# modulate
otfs.modulate(x_origin);
X_DD_mat = np.asarray([[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j],[0.707106781186548 + 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j,-0.707106781186548 - 0.707106781186548j,0.707106781186548 + 0.707106781186548j,-0.707106781186548 + 0.707106781186548j,0.707106781186548 - 0.707106781186548j]]);
X_DD_mat = np.tile(X_DD_mat, (batch_size, 1, 1));
X_DD = otfs.X_DD;
residual_X_DD = np.sum(abs(X_DD - X_DD_mat), axis=None);
print("X_DD residual is %.16f"%residual_X_DD);

X_TF_mat = np.asarray([[0.617213399848368 - 0.771516749810460j,-0.242444390695475 + 0.824345354864229j,-0.0399823990819179 - 0.259063957876307j,-0.511991606675546 - 0.350576739431887j,0.718005959952462 + 0.432849413613102j,-0.537256991482103 - 0.232543533817928j,1.07657947786886 + 0.356506212459250j],[0.118497132992806 - 1.89150142239285j,0.430357258051625 - 0.465083642658618j,0.732246737012362 + 0.121793784389172j,0.178096681072402 - 1.00679226580781j,0.00120845852464028 - 0.691221764354384j,-0.255520603446605 - 0.863089650655706j,0.125881304312419 - 0.170594978069546j],[0.246588512906545 + 0.314145940966657j,0.746988546095077 - 0.548232668277497j,-1.16203025942703 - 0.328663728046029j,1.54112468321824 + 0.0748219842037407j,-0.0706138391935354 + 0.735079165637989j,-0.979983855467841 - 0.574621071635801j,0.217987936735871 - 0.607943969542545j],[0.462910049886276 - 0.925820099772552j,-0.0585070312744325 - 0.572596179192800j,1.08588884642966 - 1.61903661827216j,-0.438256398584013 + 0.949415231399575j,-0.238216113938704 + 0.421985237053480j,-0.299275877900147 - 0.460432602646048j,-0.514543474618636 - 1.03388531777342j],[1.14214163675228 + 1.11592966670393j,0.682568587177320 - 0.484007430396573j,0.758944588873203 + 0.338175605895956j,-0.217068501546717 - 0.347843308325610j,1.34413659300045 - 1.13449552983569j,-0.462535777472587 + 0.498155362149874j,-0.547878502447341 + 0.949499980501595j],[0.653019616817654 + 1.58289472246867j,-1.02379461114829 - 0.258041701353440j,-0.601431081358350 - 1.03365655796007j,0.409929927402357 - 0.474979028862207j,-0.0561585703906778 - 0.0879819580337211j,-0.650171026706439 + 0.612556300310742j,-1.14228467287055 + 0.305204364041195j],[1.23442679969674 + 0.154303349962092j,-0.547257595388352 + 0.279276854272480j,0.981475422460769 + 1.59596115219606j,0.280312500530902 - 0.214483658010414j,-0.162623935164585 - 0.115272374362204j,-1.44019658767609 - 0.933089862762254j,-1.42626005419402 - 0.766695461295762j],[1.22888755865426 - 0.133630620956212j,0.198329397157768 - 0.00740562270058190j,0.796159638723256 - 0.638626203830082j,0.193682995638086 - 0.0490222612866811j,0.191269018656902 + 0.921735265252992j,-0.518863722772856 + 0.567978335313398j,1.40154898193152 + 0.274385454900652j],[1.94392536248956 + 0.581407182879081j,0.523695423692147 + 0.236901466096365j,0.0660848745593584 - 0.285126001296566j,-0.434472999922557 - 0.135715039415884j,0.0272106549644602 - 0.132488970950796j,1.14056580437660 - 0.471626181608863j,-0.566700495822954 - 0.728766802396824j],[-0.771516749810460 - 0.617213399848368j,-0.423783801891681 - 0.0880814576993697j,-0.809944105807226 + 1.06686941059106j,-0.400399312527088 + 1.09215920005367j,-0.481257893290164 - 0.334243673332118j,-0.175135106639675 + 0.00384170072562581j,0.901790070497007 - 0.0432083307558566j],[-0.555195212830728 + 1.38319090861635j,0.318089997120232 - 0.449056611980912j,0.249027606720102 + 0.102250037271703j,-0.842499506545611 + 0.00997714080606229j,0.408778878282636 + 0.252327816299036j,0.683437499043330 - 0.375627920242399j,0.278422463077361 + 0.0123529759236419j],[0.159842591004565 + 0.133630620956212j,0.0400322500327961 + 0.194132832700334j,1.19644644695801 - 1.65496719718205j,-0.760277602635884 + 0.681697426032938j,-0.679920070828450 - 0.0396139456321986j,0.242049930082227 - 0.365591149249954j,-0.448817063398265 + 0.115297065681236j]]);
X_TF_mat = np.tile(X_TF_mat, (batch_size, 1, 1));
X_TF = otfs.X_TF;
residual_X_TF = np.sum(abs(X_TF_mat - X_TF), axis=None);
print("X_TF residual is %.16f"%residual_X_TF);

s_mat = np.asarray([[1.87082869338697 + 0.267261241912424j],[-0.801783725737273 - 0.801783725737273j],[1.87082869338697 + 0.267261241912424j],[0.801783725737273 - 0.801783725737273j],[0.267261241912424 - 1.33630620956212j],[-0.267261241912425 + 0.801783725737273j],[0.801783725737273 + 1.33630620956212j],[-0.267261241912424 + 0.267261241912424j],[-0.801783725737273 - 0.801783725737273j],[0.801783725737273 + 0.267261241912424j],[-0.801783725737273 - 0.801783725737273j],[-1.33630620956212 - 1.33630620956212j],[0.185985892016945 - 0.386203684233779j],[0.867791801353842 + 0.180021621298566j],[-0.521120889169603 + 1.08211867656148j],[0.251533182819398 + 0.0283409831906937j],[-0.386203684233779 + 0.720508375841794j],[-0.190178036078390 - 0.111112491979311j],[0.669439688760672 + 0.304928334338300j],[-0.322522073054991 + 0.212000410769858j],[-0.901360302685003 + 0.0492965604241875j],[0.00596427071837889 + 0.719473001762772j],[-0.414544667424472 + 0.140881475654203j],[-0.0846371884122820 - 0.0846371884122819j],[0.939027395110878 - 0.748849359032488j],[0.415580041503495 - 0.442055345070524j],[0.231920613924330 - 0.184950517937923j],[-0.967368378301571 - 1.53955795455230j],[-0.748849359032488 + 1.47354987893573j],[-0.355208350861841 - 0.152510943652515j],[-0.446247489131969 + 1.42061551223094j],[-1.60323956573108 - 1.06871708190623j],[0.864153995073244 - 0.0451044163627426j],[1.38108274018140 + 0.629906916711134j],[0.790708595519807 + 0.400312767224584j],[-0.640063331490957 - 0.640063331490957j],[-0.289200275245273 + 0.0660080756165686j],[0.0529343667047858 + 0.898459248982316j],[0.417906505941275 - 0.0953844328862846j],[-0.0492965604241875 + 0.140881475654202j],[0.0660080756165686 + 0.245322208579576j],[0.572189576250724 - 0.501508320274535j],[0.182624053500142 - 0.622469592774266j],[-0.0469700959864069 + 0.487552387838442j],[-0.703744942669745 + 0.967368378301571j],[-1.18765952422759 - 0.547596192736632j],[-0.0748734000376338 - 1.53955795455230j],[-0.713508731044393 - 0.713508731044393j],[0.289200275245273 + 0.0660080756165687j],[0.0529343667047857 + 0.434618021133656j],[-0.417906505941275 - 0.0953844328862845j],[1.25035767930702 - 0.437519074836343j],[0.0660080756165687 + 0.823722759070121j],[0.200217792216834 + 0.798145919456675j],[1.01843706538269 - 0.0440690422837205j],[0.416871131862253 + 0.951393615687102j],[-0.497316176213090 - 0.538714627886293j],[-0.145417745888384 - 0.547596192736632j],[0.503527150452911 + 0.338496835669460j],[-0.249667503195733 - 0.249667503195733j],[-0.939027395110878 - 0.748849359032488j],[0.415580041503495 - 1.48429712340973j],[-0.231920613924330 - 0.184950517937923j],[0.538714627886294 + 0.338496835669460j],[-0.748849359032488 - 0.404504911286029j],[0.223192199628704 + 1.35357206253535j],[0.0175937387166911 - 0.457439277990814j],[-0.560997787391878 - 0.0264753035670296j],[-0.435500244657966 - 0.251533182819397j],[0.545269728298851 + 0.629906916711133j],[-1.08734619470195 + 0.0283409831906935j],[0.402178446848248 + 0.402178446848248j],[-0.185985892016945 - 0.386203684233779j],[0.867791801353842 - 0.655791390583984j],[0.521120889169603 + 1.08211867656148j],[0.0451044163627426 + 0.400312767224584j],[-0.386203684233779 + 0.348536591807904j],[1.68787675414337 - 0.317541258435966j],[-0.372802089578532 - 0.0670434496955908j],[0.513290938827559 + 1.04781342265241j],[0.604722703502863 - 1.25035767930702j],[0.469805498567038 + 0.719473001762772j],[-0.786516451458363 - 0.437519074836343j],[0.751175823470268 + 0.751175823470268j]]);
s_mat = np.squeeze(s_mat);
s_mat = np.tile(s_mat, (batch_size, 1));
s = otfs.s;
residual_s = np.sum(abs(s_mat - s), axis=None);
print("X_TF residual is %.16f"%residual_s);


# set the channel
H_DD = otfs.setChannel(p=6, lmax=11, kmax=3);

# pass the chanel
otfs.passChannel(No);

# demodulate
yDD = otfs.demodulate();


# calculate the residual
yDD_est = np.squeeze(np.matmul(H_DD, np.expand_dims(x_origin, axis=-1)), axis=-1);
residual = abs(yDD - yDD_est);
print("The residual is %.16f\n"%np.sum(residual, axis=None));