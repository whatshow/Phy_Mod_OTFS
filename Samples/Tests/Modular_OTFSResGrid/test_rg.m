clear;
clc;
%% settings
pil_pow = 1000;
pil_thr = 1e-10;
N = 8;
M = 8;
lmax = 1;
kmax = 1;
pl_len = 1;
pk_len = 1;
gdn_len = lmax;
gdp_len = lmax;
gkn_len = 2*kmax;
gkp_len = 2*kmax;
xDD_embed = [0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j];
xDD_full = [0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
-0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 - 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j, ...
-0.707106781186548 + 0.707106781186548j, ...
0.707106781186548 + 0.707106781186548j];

%{
rg - embedded, ideal, full guard
%}
% create data
X_DD_embed = reshape(xDD_embed, 5, 8).';
% test
rg = OTFSResGrid(M, N);
rg.setPulse2Ideal();
rg.setPilot2Center(pl_len, pk_len);
rg.setGuard(gdn_len, gdp_len, "guard_doppl_full", true);
rg.map(xDD_embed, "pilots_pow", pil_pow);
[yDD, his_est, lis_est, kis_est] = rg.demap("threshold", pil_thr);
[Y_DD, ~, ~, ~] = rg.demap("isDataVec", false, "threshold", pil_thr);
Y_DD(:, 3:5)=[];
content = rg.getContent();
contentD = reshape(yDD, 6, 8).';
contentD(:, 3) = [];
assert(his_est == 1);
assert(lis_est == 0);
assert(kis_est == 0);
assert(sum(contentD - X_DD_embed, "all") == 0);
assert(sum(Y_DD - X_DD_embed, "all") == 0);

%{
rg - superimposed, ideal, full guard
%}
X_DD_full = reshape(xDD_full, 8, 8).';
rg = OTFSResGrid(M, N);
rg.setPulse2Ideal();
rg.setPilot2SuperImposed();
rg.setPilot2Center(pl_len, pk_len);
rg.setGuard(gdn_len, gdp_len, "guard_doppl_full", true);
rg.map(xDD_full, "pilots_pow", pil_pow);
[yDD, his_est, lis_est, kis_est] = rg.demap("threshold", pil_thr);
[Y_DD, ~, ~, ~] = rg.demap("isDataVec", false, "threshold", pil_thr);
Y_DD_rebuild = reshape(yDD, 8, 8).';
Y_DD_pilot = (1+1j)*sqrt(pil_pow/2);
assert(sum(Y_DD_rebuild - X_DD_full, "all") == Y_DD_pilot);
assert(sum(Y_DD - X_DD_full, "all") == Y_DD_pilot);
